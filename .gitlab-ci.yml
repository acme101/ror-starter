image: teracy/ubuntu:14.04-dind
#
services:
 - docker:dind

variables:
#  # see https://gitlab.com/gitlab-org/gitlab-ce/issues/17861#note_12991518
 DOCKER_DRIVER: overlay

stages:
  - build
  - test
  - deploy

variables:
  HEROKU_USER_NAME: _
  HEROKU_REGISTRY: registry.heroku.com

build-verify:
  stage: build
  before_script:
    - docker version
    - docker-compose version
    # convert / to -, remove # character from docker tag name to make it a valid name
    - export IMG_TAG=`if [ "$CI_BUILD_REF_NAME" == "master" ]; then echo "latest"; else echo $CI_BUILD_REF_NAME | sed -e 's/[\/]/-/g' | sed -e 's/[\#]//g'; fi`
    - export APP_DEV_BASE_IMAGE=$CI_REGISTRY_IMAGE:base-$IMG_TAG
    - export APP_PROD_IMAGE=$CI_REGISTRY_IMAGE:$IMG_TAG
    - docker login -u "gitlab-ci-token" -p "$CI_BUILD_TOKEN" $CI_REGISTRY
    - export CI_BUILD_TIME=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
  script:
    # build
    - docker-compose build --pull app-dev-base
    - for i in $(seq 1 5); do
        docker-compose run -e RAILS_ENV=test --rm app-dev bundle exec rake db:create && break || sleep 3;
      done
    - docker-compose run -e RAILS_ENV=test --rm app-dev bundle exec rake db:migrate
    - docker-compose run -e RAILS_ENV=test --rm app-dev bundle exec rspec
    - docker-compose -f docker-compose.yml -f docker-compose.prod.yml build --pull app-prod
    - docker push $APP_DEV_BASE_IMAGE
    - docker push $APP_PROD_IMAGE

deploy-gcp-staging:
  image: teracy/google-cloud-sdk
  stage: deploy
  before_script:
    - export CI_PROJECT_NAMESPACE=`echo $CI_PROJECT_NAMESPACE | sed 's/[^a-zA-Z0-9-]//g'`;
    - export CI_PROJECT_NAME=`echo $CI_PROJECT_NAME | sed 's/[^a-zA-Z0-9-]//g'`;
    # convert / to -, remove # character from docker tag name to make it a valid name
    - export IMG_TAG=`if [ "$CI_BUILD_REF_NAME" == "master" ]; then echo "latest"; else echo $CI_BUILD_REF_NAME | sed -e 's/[\/]/-/g' | sed -e 's/[\#]//g'; fi`
    - export GCP_ACCOUNT=$GCP_ACCOUNT_STAGING
    - export GCP_PROJECT_ID=$GCP_PROJECT_ID_STAGING
    - export GCP_ZONE=$GCP_ZONE_STAGING
    - export GCP_CLUSTER_NAME=$GCP_CLUSTER_NAME_STAGING
    - export HELM_RELEASE_NAME=${HELM_RELEASE_NAME_STAGING:-$IMG_TAG-$CI_PROJECT_NAMESPACE-$CI_PROJECT_NAME}
    - export HELM_CHART=helm-charts/${HELM_CHART:-$CI_PROJECT_NAME}
    - export HELM_IMAGE_REPOSITORY=$CI_REGISTRY_IMAGE
    - export HELM_IMAGE_TAG=$IMG_TAG
    - export HELM_IMAGE_PULL_POLICY=Always
    - export HELM_IMAGE_LAST_DEPLOYED=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
    #- docker login -u "gitlab-ci-token" -p "$CI_BUILD_TOKEN" $CI_REGISTRY
    - export HELM_REPLICA_COUNT=$HELM_REPLICA_COUNT_STAGING
    - export SECRET_KEY_BASE=$SECRET_KEY_BASE_STAGING
    - export GCP_DATABASE_HOST=$GCP_DATABASE_HOST_STAGING
    - export GCP_DATABASE=$GCP_DATABASE_STAGING
    - export GCP_DATABASE_USER=$GCP_DATABASE_USER_STAGING
    - export GCP_DATABASE_PORT=$GCP_DATABASE_PORT_STAGING
    - export GCP_DATABASE_PASSWORD=$GCP_DATABASE_PASSWORD_STAGING
    - echo $GCP_KEY_FILE_STAGING | base64 --decode > /tmp/gcp_key_file.json
  script:
    - sh scripts/setup_gcp.sh
    - sh scripts/deploy_gcp.sh
  after_script:
    - rm /tmp/gcp_key_file.json
  environment: staging
  only:
    - develop
  allow_failure: true # for downstream failure
  when: on_success


deploy-gcp-prod:
  image: teracy/google-cloud-sdk
  stage: deploy
  before_script:
    - export CI_PROJECT_NAMESPACE=`echo $CI_PROJECT_NAMESPACE | sed 's/[^a-zA-Z0-9-]//g'`;
    - export CI_PROJECT_NAME=`echo $CI_PROJECT_NAME | sed 's/[^a-zA-Z0-9-]//g'`;
    # convert / to -, remove # character from docker tag name to make it a valid name
    - export IMG_TAG=`if [ "$CI_BUILD_REF_NAME" == "master" ]; then echo "latest"; else echo $CI_BUILD_REF_NAME | sed -e 's/[\/]/-/g' | sed -e 's/[\#]//g'; fi`
    - export GCP_ACCOUNT=$GCP_ACCOUNT_PROD
    - export GCP_PROJECT_ID=$GCP_PROJECT_ID_PROD
    - export GCP_ZONE=$GCP_ZONE_PROD
    - export GCP_CLUSTER_NAME=$GCP_CLUSTER_NAME_PROD
    - export HELM_RELEASE_NAME=${HELM_RELEASE_NAME_PROD:-$IMG_TAG-$CI_PROJECT_NAMESPACE-$CI_PROJECT_NAME}
    - export HELM_CHART=helm-charts/${HELM_CHART:-$CI_PROJECT_NAME}
    - export HELM_IMAGE_REPOSITORY=$CI_REGISTRY_IMAGE
    - export HELM_IMAGE_TAG=$IMG_TAG
    - export HELM_IMAGE_PULL_POLICY=Always
    - export HELM_IMAGE_LAST_DEPLOYED=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
    #- docker login -u "gitlab-ci-token" -p "$CI_BUILD_TOKEN" $CI_REGISTRY
    - export HELM_REPLICA_COUNT=$HELM_REPLICA_COUNT_PROD
    - export SECRET_KEY_BASE=$SECRET_KEY_BASE_PROD
    - export GCP_DATABASE_HOST=$GCP_DATABASE_HOST_PROD
    - export GCP_DATABASE=$GCP_DATABASE_PROD
    - export GCP_DATABASE_USER=$GCP_DATABASE_USER_PROD
    - export GCP_DATABASE_PORT=$GCP_DATABASE_PORT_PROD
    - export GCP_DATABASE_PASSWORD=$GCP_DATABASE_PASSWORD_PROD
    - echo $GCP_KEY_FILE_PROD | base64 --decode > /tmp/gcp_key_file.json
  script:
    - sh scripts/setup_gcp.sh
    - sh scripts/deploy_gcp.sh
  after_script:
    - rm /tmp/gcp_key_file.json
  environment: prod
  only:
    - master
  allow_failure: true # for downstream failure
  when: on_success


deploy-heroku-staging:
  stage: deploy
  before_script:
    - wget -qO- https://cli-assets.heroku.com/install-ubuntu.sh | sh
    - heroku --version
    - export CI_PROJECT_NAMESPACE=`echo $CI_PROJECT_NAMESPACE | sed 's/[^a-zA-Z0-9-]//g'`;
    - export CI_PROJECT_NAME=`echo $CI_PROJECT_NAME | sed 's/[^a-zA-Z0-9-]//g'`;
    # convert / to -, remove # character from docker tag name to make it a valid name
    - export IMG_TAG=`if [ "$CI_BUILD_REF_NAME" == "master" ]; then echo "latest"; else echo $CI_BUILD_REF_NAME | sed -e 's/[\/]/-/g' | sed -e 's/[\#]//g'; fi`
    - export DOCKER_IMAGE=$CI_REGISTRY_IMAGE:$IMG_TAG
    - export HEROKU_APP_NAME=${HEROKU_APP_NAME_STAGING:-$IMG_TAG-$CI_PROJECT_NAMESPACE-$CI_PROJECT_NAME};
    - export HEROKU_IMAGE=$HEROKU_REGISTRY/$HEROKU_APP_NAME/web
    - export HEROKU_EMAIL=$HEROKU_EMAIL_STAGING
    - export HEROKU_API_KEY=$HEROKU_API_KEY_STAGING
    - export SECRET_KEY_BASE=$SECRET_KEY_BASE_STAGING
    - export HEROKU_DATABASE_HOST=$HEROKU_DATABASE_HOST_STAGING
    - export HEROKU_DATABASE=$HEROKU_DATABASE_STAGING
    - export HEROKU_DATABASE_USER=$HEROKU_DATABASE_USER_STAGING
    - export HEROKU_DATABASE_PORT=$HEROKU_DATABASE_PORT_STAGING
    - export HEROKU_DATABASE_PASSWORD=$HEROKU_DATABASE_PASSWORD_STAGING
    - export HEROKU_DATABASE_URI=$HEROKU_DATABASE_URI_STAGING
    - docker login -u "gitlab-ci-token" -p "$CI_BUILD_TOKEN" $CI_REGISTRY
  script:
    - docker login -u "$HEROKU_USER_NAME" -p "$HEROKU_API_KEY" $HEROKU_REGISTRY
    - docker image pull $DOCKER_IMAGE
    - sh scripts/deploy_heroku.sh
  environment: staging
  only:
    - develop
  allow_failure: true # for downstream failure
  when: on_success

deploy-heroku-prod:
  stage: deploy
  before_script:
    - wget -qO- https://cli-assets.heroku.com/install-ubuntu.sh | sh
    - heroku --version
    - export CI_PROJECT_NAMESPACE=`echo $CI_PROJECT_NAMESPACE | sed 's/[^a-zA-Z0-9-]//g'`;
    - export CI_PROJECT_NAME=`echo $CI_PROJECT_NAME | sed 's/[^a-zA-Z0-9-]//g'`;
    # convert / to -, remove # character from docker tag name to make it a valid name
    - export IMG_TAG=`if [ "$CI_BUILD_REF_NAME" == "master" ]; then echo "latest"; else echo $CI_BUILD_REF_NAME | sed -e 's/[\/]/-/g' | sed -e 's/[\#]//g'; fi`
    - export DOCKER_IMAGE=$CI_REGISTRY_IMAGE:$IMG_TAG
    - export HEROKU_APP_NAME=${HEROKU_APP_NAME_PROD:-$IMG_TAG-$CI_PROJECT_NAMESPACE-$CI_PROJECT_NAME};
    - export HEROKU_IMAGE=$HEROKU_REGISTRY/$HEROKU_APP_NAME/web
    - export HEROKU_EMAIL=$HEROKU_EMAIL_PROD
    - export HEROKU_API_KEY=$HEROKU_API_KEY_PROD
    - export SECRET_KEY_BASE=$SECRET_KEY_BASE_PROD
    - export HEROKU_DATABASE_HOST=$HEROKU_DATABASE_HOST_PROD
    - export HEROKU_DATABASE=$HEROKU_DATABASE_PROD
    - export HEROKU_DATABASE_USER=$HEROKU_DATABASE_USER_PROD
    - export HEROKU_DATABASE_PORT=$HEROKU_DATABASE_PORT_PROD
    - export HEROKU_DATABASE_PASSWORD=$HEROKU_DATABASE_PASSWORD_PROD
    - export HEROKU_DATABASE_URI=$HEROKU_DATABASE_URI_PROD
    - docker login -u "gitlab-ci-token" -p "$CI_BUILD_TOKEN" $CI_REGISTRY
  script:
    - docker login -u "$HEROKU_USER_NAME" -p "$HEROKU_API_KEY" $HEROKU_REGISTRY
    - docker image pull $DOCKER_IMAGE
    - sh scripts/deploy_heroku.sh
  environment: prod
  only:
    - master
  allow_failure: true # for downstream failure
  when: on_success
